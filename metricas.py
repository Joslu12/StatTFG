from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from event_types import *
# Init app
app = Flask(__name__)
basedir=os.path.abspath(os.path.dirname(__file__))
# Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root@localhost/mydb'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Init db
db = SQLAlchemy(app)



def getPlayerAvgStat(pid,season):
    # Consulta para devolver cada partido
    #passes= db.session.execute(f"SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete FROM event e JOIN evpass p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id")
    #shot=db.session.execute(f"SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evshot p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id")
    
    # Consulta que devuelva la media 
    #allpasses=db.session.execute(f"SELECT ROUND(AVG(Total),0) as Pases, ROUND(AVG(Good),0) as Goodpass, ROUND(AVG(Centros),0) as Cros, ROUND(AVG(Asistencia),0) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Centros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").all()
    #Players: 5503 4324 11179
    passes=db.session.execute(f"SELECT AVG(Total) as Pases, AVG(Good) as Goodpass, AVG(Cros) as Centros, AVG(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT AVG(Total) as Shot, AVG(Good) as Goodshot, AVG(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT AVG(Total) as Total, AVG(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT AVG(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT AVG(Total) as Runs,AVG(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties,AVG(Yellows) as Yellow,AVG(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT AVG(Conceded) as Goals,AVG(Exits) as Duel,AVG(Penal) as MakePenal,AVG(Saves) as Save,AVG(PenaltySave) as SavePenalties,AVG(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    startgames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evstartingxi` WHERE `ev_player_id` = {pid}").first()
    subsitutiongames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evsubstitution` WHERE `ev_replacement` = {pid}").first()
    
    jug = AvgStat(pid,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch,startgames.Played,startgames.Played+subsitutiongames.Played)
    print(jug)
    db.session.add(jug)
    db.session.commit()
    #print("Estadisticas media de "+jugador.name+"\n Pases: "+str(jugador.goodpass)+ "/" +str(jugador.pases)+"\n Centros: "+str(jugador.cross)+"\n  Goles"+str(jugador.goodshot)+"\n  Goles"+str(jugador.shot)+"\n Asistencia: "+str(jugador.goalasist)+"\n Regates: "+str(jugador.gooddribbles)+"/"+str(jugador.dribbles)+"\n Recuperaciones: "+str(jugador.recoveries))
    
def getPlayerMinStat(pid,season):
    passes=db.session.execute(f"SELECT MIN(Total) as Pases,MIN(Good) as Goodpass, MIN(Cros) as Centros, MIN(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT MIN(Total) as Shot, MIN(Good) as Goodshot, MIN(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT MIN(Total) as Total, MIN(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT MIN(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT MIN(Total) as Runs,MIN(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT MIN(Total) as Total,MIN(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Penal) as Penalties,MIN(Yellows) as Yellow,MIN(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT MIN(Conceded) as Goals,MIN(Exits) as Duel,MIN(Penal) as MakePenal,MIN(Saves) as Save,MIN(PenaltySave) as SavePenalties,MIN(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    
    jug = MinStat(pid,season,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch)
    #print(jug)
    db.session.add(jug)
    db.session.commit()

def getPlayerMinStatSeason(pid,season):
    passes=db.session.execute(f"SELECT MIN(Total) as Pases, MIN(Good) as Goodpass, MIN(Cros) as Centros, MIN(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT MIN(Total) as Shot, MIN(Good) as Goodshot, MIN(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT MIN(Total) as Total, MIN(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT MIN(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT MIN(Total) as Runs,MIN(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT MIN(Total) as Total,MIN(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Penal) as Penalties,MIN(Yellows) as Yellow,MIN(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT MIN(Total) as Total,MIN(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT MIN(Conceded) as Goals,MIN(Exits) as Duel,MIN(Penal) as MakePenal,MIN(Saves) as Save,MIN(PenaltySave) as SavePenalties,MIN(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
 
    jug = MinStat(pid,season,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch)
    print(jug)
    db.session.add(jug)
    db.session.commit()

def getPlayerMaxStat(pid,season):
    passes=db.session.execute(f"SELECT MAX(Total) as Pases, MAX(Good) as Goodpass, MAX(Cros) as Centros, MAX(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT MAX(Total) as Shot, MAX(Good) as Goodshot, MAX(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT MAX(Total) as Total, MAX(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT MAX(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT MAX(Total) as Runs,MAX(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT MAX(Total) as Total,MAX(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Penal) as Penalties,MAX(Yellows) as Yellow,MAX(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT MAX(Conceded) as Goals,MAX(Exits) as Duel,MAX(Penal) as MakePenal,MAX(Saves) as Save,MAX(PenaltySave) as SavePenalties,MAX(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id WHERE e.event_player_id = {pid} group by e.event_match_id) as sq").first()
    
    jug = MaxStat(pid,season,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch)
    #print(jug)
    db.session.add(jug)
    db.session.commit()

def getPlayerMaxStatSeason(pid,season):
    passes=db.session.execute(f"SELECT MAX(Total) as Pases, MAX(Good) as Goodpass, MAX(Cros) as Centros, MAX(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT MAX(Total) as Shot, MAX(Good) as Goodshot, MAX(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT MAX(Total) as Total, MAX(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT MAX(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT MAX(Total) as Runs,MAX(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT MAX(Total) as Total,MAX(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Penal) as Penalties,MAX(Yellows) as Yellow,MAX(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT MAX(Total) as Total,MAX(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT MAX(Conceded) as Goals,MAX(Exits) as Duel,MAX(Penal) as MakePenal,MAX(Saves) as Save,MAX(PenaltySave) as SavePenalties,MAX(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    
    jug = MaxStat(pid,season,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch)
    print(jug)
    db.session.add(jug)
    db.session.commit()

def getPlayerStatSeason(pid,season):
    passes=db.session.execute(f"SELECT AVG(Total) as Pases, AVG(Good) as Goodpass, AVG(Cros) as Centros, AVG(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT AVG(Total) as Shot, AVG(Good) as Goodshot, AVG(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT AVG(Total) as Total, AVG(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT AVG(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT AVG(Total) as Runs,AVG(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties,AVG(Yellows) as Yellow,AVG(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT AVG(Conceded) as Goals,AVG(Exits) as Duel,AVG(Penal) as MakePenal,AVG(Saves) as Save,AVG(PenaltySave) as SavePenalties,AVG(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").first()
    startgames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evstartingxi` s JOIN event e ON s.ev_id=e.event_id JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE s.ev_player_id = {pid} AND c.competition_season_id = {season}").first()
    subsitutiongames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evsubstitution` s JOIN event e ON e.event_id=s.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE s.ev_replacement = {pid} AND c.competition_season_id = {season}").first()
 
    jug = AvgStat(pid,season,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch,startgames.Played,startgames.Played+subsitutiongames.Played)
    print(jug)
    db.session.add(jug)
    db.session.commit()

def getPlayerStatMatcha(pid,match):
    passes=db.session.execute(f"SELECT AVG(Total) as Pases, AVG(Good) as Goodpass, AVG(Cros) as Centros, AVG(Asistencia) as GoalAsist FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    shots=db.session.execute(f"SELECT AVG(Total) as Shot, AVG(Good) as Goodshot, AVG(Off) as Bad FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    dribbles= db.session.execute(f"SELECT AVG(Total) as Total, AVG(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    recoveries= db.session.execute(f"SELECT AVG(Total) as Total FROM (SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    carry = db.session.execute(f"SELECT AVG(Total) as Runs,AVG(Distancia) as AvgRun,SUM(Distancia) as Distance FROM (SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    receipt=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evballreceipt p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    duel= db.session.execute(f"SELECT AVG(Total) as Total,AVG(Complete) as Good FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Won' OR p.ev_outcome='Success' OR p.ev_outcome='Success In Play' OR p.ev_outcome='Success Out') THEN 1 ELSE 0 END) AS Complete FROM event e JOIN evduel p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    foulcommited=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties,AVG(Yellows) as Yellow,AVG(Reds) as Red FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal,SUM(CASE WHEN (p.ev_card = 'Yellow Card') THEN 1 ELSE 0 END) AS Yellows,SUM(CASE WHEN (p.ev_card = 'Red Card') THEN 1 ELSE 0 END) AS Reds FROM event e JOIN evfoulcommited p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    foulwon=db.session.execute(f"SELECT AVG(Total) as Total,AVG(Penal) as Penalties FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_penalty = 1) THEN 1 ELSE 0 END) AS Penal FROM event e JOIN evfoulwon p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    gk= db.session.execute(f"SELECT AVG(Conceded) as Goals,AVG(Exits) as Duel,AVG(Penal) as MakePenal,AVG(Saves) as Save,AVG(PenaltySave) as SavePenalties,AVG(Punchs) as Punch FROM (SELECT SUM(CASE WHEN (p.ev_type = 'Goal Conceded') THEN 1 ELSE 0 END) AS Conceded,SUM(CASE WHEN (p.ev_type = 'Collected' OR p.ev_type='Punch' or p.ev_type='Smother' or p.ev_type='Keeper Sweeper' or p.ev_type='Shot Faced') THEN 1 ELSE 0 END) AS Exits, SUM(CASE WHEN (p.ev_type = 'Penalty Conceded') THEN 1 ELSE 0 END) AS Penal, SUM(CASE WHEN (p.ev_type='Penalty Saved' or p.ev_type='Save' or p.ev_type='Shot Saved' or p.ev_type='Shot Saved To Post' or p.ev_type='Saved to Post' or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS Saves,SUM(CASE WHEN (p.ev_type='Penalty Saved'or p.ev_type='Penalty Saved to Post' ) THEN 1 ELSE 0 END) AS PenaltySave, SUM(CASE WHEN (p.ev_type = 'Punch') THEN 1 ELSE 0 END) AS Punchs FROM event e JOIN evgoalkeeper p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} group by e.event_match_id) as sq").first()
    startgames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evstartingxi` s JOIN event e ON s.ev_id=e.event_id JOIN `match` m ON e.event_match_id=m.match_id  WHERE s.ev_player_id = {pid} AND m.match_id = {match}").first()
    subsitutiongames=db.session.execute(f"SELECT COUNT(*) as Played FROM `evsubstitution` s JOIN event e ON e.event_id=s.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE s.ev_replacement = {pid} AND m.match_id = {match}").first()
 
    jug = AvgStat(pid,passes.Pases,passes.Goodpass,passes.GoalAsist,shots.Shot,shots.Goodshot,shots.Bad,passes.Centros,dribbles.Total,dribbles.Complete,recoveries.Total,carry.Runs,carry.AvgRun,carry.Distance,receipt.Total,receipt.Good,duel.Total,duel.Good,foulcommited.Total,foulcommited.Penalties,foulcommited.Yellow,foulcommited.Red,foulwon.Total,foulwon.Penalties,gk.Goals,gk.Duel,gk.MakePenal,gk.Save,gk.SavePenalties,gk.Punch,startgames.Played,startgames.Played+subsitutiongames.Played)
    print(jug)
    #db.session.add(jug)
    #db.session.commit()

def getPlayerStatMatch(pid,match):
    passes=db.session.execute(f"SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome IS NULL) THEN 1 ELSE 0 END) AS Good,SUM(CASE WHEN (p.ev_outcome='Incomplete') THEN 1 ELSE 0 END) AS Incomplete,SUM(CASE WHEN (p.ev_cross='1') THEN 1 ELSE 0 END) AS Cros,SUM(CASE WHEN (p.ev_goal_assist='1') THEN 1 ELSE 0 END) AS Asistencia FROM event e JOIN evpass p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match}").first()
    shots=db.session.execute(f"SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome= 'Goal') THEN 1 ELSE 0 END) AS Good, SUM(CASE WHEN (p.ev_outcome= 'Off T') THEN 1 ELSE 0 END) AS Off FROM event e JOIN evshot p ON e.event_id=p.ev_id JOIN `match` m ON e.event_match_id=m.match_id WHERE e.event_player_id = {pid} AND m.match_id = {match}").first()
    dribbles= db.session.execute(f"SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} ").first()
    recoveries= db.session.execute(f"SELECT COUNT(*) as Total FROM event e JOIN evballrecovery p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match}").first()
    carry = db.session.execute(f"SELECT COUNT(*) as Total, ABS(e.event_location_x-p.ev_end_loc_x)+ABS(e.event_location_y-p.ev_end_loc_y) as Distancia FROM event e JOIN evcarry p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id  WHERE e.event_player_id = {pid} AND m.match_id = {match} ").first()

def updatePlayer(pid,season):
    adribbles= db.session.execute(f"SELECT AVG(Total) as Total, AVG(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").fetchall()
    xdribbles= db.session.execute(f"SELECT MAX(Total) as Total, MAX(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").fetchall()
    dribbles= db.session.execute(f"SELECT MIN(Total) as Total, MIN(Good) as Complete FROM (SELECT COUNT(*) as Total, SUM(CASE WHEN (p.ev_outcome = 'Complete') THEN 1 ELSE 0 END) AS Good FROM event e JOIN evdribble p ON e.event_id=p.ev_id  JOIN `match` m ON e.event_match_id=m.match_id JOIN competition c ON c.competition_id=m.match_competition_id AND c.competition_season_id=m.match_season_id WHERE e.event_player_id = {pid} AND c.competition_season_id = {season} group by e.event_match_id) as sq").fetchall()
    print(check(adribbles[0].Total))
    db.session.execute(f"UPDATE avgstat a SET a.avgstat_dribbles = {check(adribbles[0].Total)}, a.avgstat_gooddribbles={check(adribbles[0].Complete)} WHERE a.avgstat_player_id={pid} and a.avgstat_season_id={season}")
    db.session.execute(f"UPDATE maxstat a SET a.maxstat_dribbles = {check(xdribbles[0].Total)}, a.maxstat_gooddribbles={check(xdribbles[0].Complete)} WHERE a.maxstat_player_id={pid} and a.maxstat_season_id={season}")
    db.session.execute(f"UPDATE minstat a SET a.minstat_dribbles = {check(dribbles[0].Total)}, a.minstat_gooddribbles={check(dribbles[0].Complete)} WHERE a.minstat_player_id={pid} and a.minstat_season_id={season}")
    db.session.commit()

def getAllPlayer():
    players=db.session.execute(f"SELECT DISTINCT p.player_id FROM `player`p JOIN evstartingxi e ON p.player_id=e.ev_player_id JOIN team t ON t.team_id=e.ev_team_id WHERE t.team_id=217 ")
    for p in players:
        updatePlayer(p.player_id,23)
        updatePlayer(p.player_id,1)
        #getPlayerMinStat(p.player_id,4)
        #getPlayerStatSeason(p.player_id,27)
        #getPlayerMinStat(p.player_id,27)
        #getPlayerStatSeason(p.player_id,2)
        #getPlayerStatSeason(p.player_id,38)
        #getPlayerStatSeason(p.player_id,37)
        #getPlayerMinStat(p.player_id,2)

        #getPlayerMinStatSeason(p.player_id,2)

def check(a):
    if(a == None):
        return 0
    else:
        return a

getAllPlayer()
#getEventByPlayerId(5503)
#getPlayerStatMatch(5503, 266015)
